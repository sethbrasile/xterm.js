import { Terminal as ITerminalApi, IMarker, IDisposable, ILocalizableStrings, ITerminalAddon, IBufferNamespace as IBufferNamespaceApi, IParser, ILinkProvider, IUnicodeHandling, IModes, IDecorationOptions, IDecoration } from 'xterm';
import { IBufferRange } from 'browser/Types';
import { IEvent } from 'common/EventEmitter';
import { ITerminalOptions } from 'common/Types';
export declare class Terminal implements ITerminalApi {
    private _core;
    private _addonManager;
    private _parser;
    private _buffer;
    private _publicOptions;
    constructor(options?: ITerminalOptions);
    private _checkReadonlyOptions;
    private _checkProposedApi;
    get onBell(): IEvent<void>;
    get onBinary(): IEvent<string>;
    get onCursorMove(): IEvent<void>;
    get onData(): IEvent<string>;
    get onKey(): IEvent<{
        key: string;
        domEvent: KeyboardEvent;
    }>;
    get onLineFeed(): IEvent<void>;
    get onRender(): IEvent<{
        start: number;
        end: number;
    }>;
    get onResize(): IEvent<{
        cols: number;
        rows: number;
    }>;
    get onScroll(): IEvent<number>;
    get onSelectionChange(): IEvent<void>;
    get onTitleChange(): IEvent<string>;
    get onWriteParsed(): IEvent<void>;
    get element(): HTMLElement | undefined;
    get parser(): IParser;
    get unicode(): IUnicodeHandling;
    get textarea(): HTMLTextAreaElement | undefined;
    get rows(): number;
    get cols(): number;
    get buffer(): IBufferNamespaceApi;
    get markers(): ReadonlyArray<IMarker>;
    get modes(): IModes;
    get options(): Required<ITerminalOptions>;
    set options(options: ITerminalOptions);
    blur(): void;
    focus(): void;
    resize(columns: number, rows: number): void;
    open(parent: HTMLElement): void;
    attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void;
    registerLinkProvider(linkProvider: ILinkProvider): IDisposable;
    registerCharacterJoiner(handler: (text: string) => [number, number][]): number;
    deregisterCharacterJoiner(joinerId: number): void;
    registerMarker(cursorYOffset?: number): IMarker | undefined;
    registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;
    hasSelection(): boolean;
    select(column: number, row: number, length: number): void;
    getSelection(): string;
    getSelectionPosition(): IBufferRange | undefined;
    clearSelection(): void;
    selectAll(): void;
    selectLines(start: number, end: number): void;
    dispose(): void;
    scrollLines(amount: number): void;
    scrollPages(pageCount: number): void;
    scrollToTop(): void;
    scrollToBottom(): void;
    scrollToLine(line: number): void;
    clear(): void;
    write(data: string | Uint8Array, callback?: () => void): void;
    writeln(data: string | Uint8Array, callback?: () => void): void;
    paste(data: string): void;
    refresh(start: number, end: number): void;
    reset(): void;
    clearTextureAtlas(): void;
    loadAddon(addon: ITerminalAddon): void;
    static get strings(): ILocalizableStrings;
    private _verifyIntegers;
    private _verifyPositiveIntegers;
}
//# sourceMappingURL=Terminal.d.ts.map