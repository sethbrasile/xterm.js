import { IInputHandler, IAttributeData, IDisposable, IColorEvent } from 'common/Types';
import { Disposable } from 'common/Lifecycle';
import { IEvent } from 'common/EventEmitter';
import { IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';
import { ICoreService, IBufferService, IOptionsService, ILogService, IDirtyRowService, ICoreMouseService, ICharsetService, IUnicodeService, IOscLinkService } from 'common/services/Services';
export declare enum WindowsOptionsReportType {
    GET_WIN_SIZE_PIXELS = 0,
    GET_CELL_SIZE_PIXELS = 1
}
export declare class InputHandler extends Disposable implements IInputHandler {
    private readonly _bufferService;
    private readonly _charsetService;
    private readonly _coreService;
    private readonly _dirtyRowService;
    private readonly _logService;
    private readonly _optionsService;
    private readonly _oscLinkService;
    private readonly _coreMouseService;
    private readonly _unicodeService;
    private readonly _parser;
    private _parseBuffer;
    private _stringDecoder;
    private _utf8Decoder;
    private _workCell;
    private _windowTitle;
    private _iconName;
    private _currentLinkId?;
    protected _windowTitleStack: string[];
    protected _iconNameStack: string[];
    private _curAttrData;
    getAttrData(): IAttributeData;
    private _eraseAttrDataInternal;
    private _activeBuffer;
    private _onRequestBell;
    get onRequestBell(): IEvent<void>;
    private _onRequestRefreshRows;
    get onRequestRefreshRows(): IEvent<number, number>;
    private _onRequestReset;
    get onRequestReset(): IEvent<void>;
    private _onRequestSendFocus;
    get onRequestSendFocus(): IEvent<void>;
    private _onRequestSyncScrollBar;
    get onRequestSyncScrollBar(): IEvent<void>;
    private _onRequestWindowsOptionsReport;
    get onRequestWindowsOptionsReport(): IEvent<WindowsOptionsReportType>;
    private _onA11yChar;
    get onA11yChar(): IEvent<string>;
    private _onA11yTab;
    get onA11yTab(): IEvent<number>;
    private _onCursorMove;
    get onCursorMove(): IEvent<void>;
    private _onLineFeed;
    get onLineFeed(): IEvent<void>;
    private _onScroll;
    get onScroll(): IEvent<number>;
    private _onTitleChange;
    get onTitleChange(): IEvent<string>;
    private _onColor;
    get onColor(): IEvent<IColorEvent>;
    private _parseStack;
    constructor(_bufferService: IBufferService, _charsetService: ICharsetService, _coreService: ICoreService, _dirtyRowService: IDirtyRowService, _logService: ILogService, _optionsService: IOptionsService, _oscLinkService: IOscLinkService, _coreMouseService: ICoreMouseService, _unicodeService: IUnicodeService, _parser?: IEscapeSequenceParser);
    dispose(): void;
    private _preserveStack;
    private _logSlowResolvingAsync;
    parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean>;
    print(data: Uint32Array, start: number, end: number): void;
    registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable;
    registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable;
    registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable;
    registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable;
    bell(): boolean;
    lineFeed(): boolean;
    carriageReturn(): boolean;
    backspace(): boolean;
    tab(): boolean;
    shiftOut(): boolean;
    shiftIn(): boolean;
    private _restrictCursor;
    private _setCursor;
    private _moveCursor;
    cursorUp(params: IParams): boolean;
    cursorDown(params: IParams): boolean;
    cursorForward(params: IParams): boolean;
    cursorBackward(params: IParams): boolean;
    cursorNextLine(params: IParams): boolean;
    cursorPrecedingLine(params: IParams): boolean;
    cursorCharAbsolute(params: IParams): boolean;
    cursorPosition(params: IParams): boolean;
    charPosAbsolute(params: IParams): boolean;
    hPositionRelative(params: IParams): boolean;
    linePosAbsolute(params: IParams): boolean;
    vPositionRelative(params: IParams): boolean;
    hVPosition(params: IParams): boolean;
    tabClear(params: IParams): boolean;
    cursorForwardTab(params: IParams): boolean;
    cursorBackwardTab(params: IParams): boolean;
    selectProtected(params: IParams): boolean;
    private _eraseInBufferLine;
    private _resetBufferLine;
    eraseInDisplay(params: IParams, respectProtect?: boolean): boolean;
    eraseInLine(params: IParams, respectProtect?: boolean): boolean;
    insertLines(params: IParams): boolean;
    deleteLines(params: IParams): boolean;
    insertChars(params: IParams): boolean;
    deleteChars(params: IParams): boolean;
    scrollUp(params: IParams): boolean;
    scrollDown(params: IParams): boolean;
    scrollLeft(params: IParams): boolean;
    scrollRight(params: IParams): boolean;
    insertColumns(params: IParams): boolean;
    deleteColumns(params: IParams): boolean;
    eraseChars(params: IParams): boolean;
    repeatPrecedingCharacter(params: IParams): boolean;
    sendDeviceAttributesPrimary(params: IParams): boolean;
    sendDeviceAttributesSecondary(params: IParams): boolean;
    private _is;
    setMode(params: IParams): boolean;
    setModePrivate(params: IParams): boolean;
    resetMode(params: IParams): boolean;
    resetModePrivate(params: IParams): boolean;
    requestMode(params: IParams, ansi: boolean): boolean;
    private _updateAttrColor;
    private _extractColor;
    private _processUnderline;
    charAttributes(params: IParams): boolean;
    deviceStatus(params: IParams): boolean;
    deviceStatusPrivate(params: IParams): boolean;
    softReset(params: IParams): boolean;
    setCursorStyle(params: IParams): boolean;
    setScrollRegion(params: IParams): boolean;
    windowOptions(params: IParams): boolean;
    saveCursor(params?: IParams): boolean;
    restoreCursor(params?: IParams): boolean;
    setTitle(data: string): boolean;
    setIconName(data: string): boolean;
    setOrReportIndexedColor(data: string): boolean;
    setHyperlink(data: string): boolean;
    private _createHyperlink;
    private _finishHyperlink;
    private _specialColors;
    private _setOrReportSpecialColor;
    setOrReportFgColor(data: string): boolean;
    setOrReportBgColor(data: string): boolean;
    setOrReportCursorColor(data: string): boolean;
    restoreIndexedColor(data: string): boolean;
    restoreFgColor(data: string): boolean;
    restoreBgColor(data: string): boolean;
    restoreCursorColor(data: string): boolean;
    nextLine(): boolean;
    keypadApplicationMode(): boolean;
    keypadNumericMode(): boolean;
    selectDefaultCharset(): boolean;
    selectCharset(collectAndFlag: string): boolean;
    index(): boolean;
    tabSet(): boolean;
    reverseIndex(): boolean;
    fullReset(): boolean;
    reset(): void;
    private _eraseAttrData;
    setgLevel(level: number): boolean;
    screenAlignmentPattern(): boolean;
    requestStatusString(data: string, params: IParams): boolean;
}
//# sourceMappingURL=InputHandler.d.ts.map